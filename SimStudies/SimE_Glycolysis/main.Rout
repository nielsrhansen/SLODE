
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> 
> 
> ## Libraries ##
> library(magrittr)
> library(plyr)
> library(reshape)

Attaching package: ‘reshape’

The following objects are masked from ‘package:plyr’:

    rename, round_any

> library(ggplot2)
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:reshape’:

    expand

Loading required package: foreach
Loaded glmnet 2.0-18

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> library(episode)
> 
> ## Sources ##
> simname <- "simprior_3"
> source("R/Hynne_model.R")
> source("simulate_data.R")
> 
> if (simname == "simprior_1") {
+   sim_parameters <- expand.grid(
+     sigma = c(0.1, 0.5, 1),
+     a = c("correct", "extra"),
+     stringsAsFactors = FALSE)
+   sim_parameters <- do.call(rbind, Map(cbind, replicate(10, sim_parameters, simplify = FALSE), eps = as.list(1:10)))
+   sim_parameters$eps <- as.factor(sim_parameters$eps)
+ } else if (simname == "simprior_2") {
+   sim_parameters <- expand.grid(
+     sigma = c(0.1, 0.25, 0.5),
+     a = c("correct", "extra", "no_prior"),
+     stringsAsFactors = FALSE)
+   sim_parameters <- do.call(rbind, Map(cbind, replicate(10, sim_parameters, simplify = FALSE), eps = as.list(1:10)))
+   sim_parameters$eps <- as.factor(sim_parameters$eps)
+ } else if (simname == "simprior_3") {
+   sim_parameters <- expand.grid(
+     sigma = c(0.1, 0.25, 0.5),
+     a = c("correct", "extra", "no_prior"),
+     stringsAsFactors = FALSE)
+   sim_parameters <- do.call(rbind, Map(cbind, replicate(100, sim_parameters, simplify = FALSE), eps = as.list(1:100)))
+   sim_parameters$eps <- as.factor(sim_parameters$eps)
+ } else {
+   stop("simname not recognised")
+ }
> 
> 
> # True network
> rat <- ratmak(A = A_correct, C = CC, s = solver(step_max = 100000, h_init = 0.001))
> netw <- field(o = rat, x = x0, param = list(theta1 = K1, theta2 = K2), differentials = TRUE)
> netw <- netw$f_dx != 0
> 
> ## From trajectory to discrete time points
> trajs0 <- lapply(trajs, function(x) {
+   tt <- exp(seq(0, log(nrow(x) - 10), length.out = 30))
+   tt <- round(tt)
+   tt <- tt + cumsum(c(0, diff(tt) <= 0)) # if two neigbours are identical, add one
+   x[tt , ]
+ })
> 
> ## Noise
> set.seed(27 + 09 + 1990)
> Neps <- length(levels(sim_parameters$eps))
> eps <- array(rnorm(30 * rat$d * Neps), dim = c(30, rat$d, Neps))
> 
> ## Comp. setups ##
> cl <- makeCluster(min(60, nrow(sim_parameters)), outfile = "")
starting worker pid=42449 on localhost:11357 at 17:44:03.540
starting worker pid=42458 on localhost:11357 at 17:44:03.843
starting worker pid=42467 on localhost:11357 at 17:44:04.152
starting worker pid=42477 on localhost:11357 at 17:44:04.448
starting worker pid=42486 on localhost:11357 at 17:44:04.755
starting worker pid=42495 on localhost:11357 at 17:44:05.053
starting worker pid=42504 on localhost:11357 at 17:44:05.349
starting worker pid=42513 on localhost:11357 at 17:44:05.645
starting worker pid=42523 on localhost:11357 at 17:44:05.945
starting worker pid=42532 on localhost:11357 at 17:44:06.252
starting worker pid=42541 on localhost:11357 at 17:44:06.547
starting worker pid=42551 on localhost:11357 at 17:44:06.844
starting worker pid=42561 on localhost:11357 at 17:44:07.150
starting worker pid=42570 on localhost:11357 at 17:44:07.449
starting worker pid=42579 on localhost:11357 at 17:44:07.756
starting worker pid=42588 on localhost:11357 at 17:44:08.053
starting worker pid=42598 on localhost:11357 at 17:44:08.349
starting worker pid=42607 on localhost:11357 at 17:44:08.648
starting worker pid=42616 on localhost:11357 at 17:44:08.947
starting worker pid=42625 on localhost:11357 at 17:44:09.259
starting worker pid=42635 on localhost:11357 at 17:44:09.557
starting worker pid=42644 on localhost:11357 at 17:44:09.855
starting worker pid=42653 on localhost:11357 at 17:44:10.152
starting worker pid=42662 on localhost:11357 at 17:44:10.447
starting worker pid=42672 on localhost:11357 at 17:44:10.759
starting worker pid=42681 on localhost:11357 at 17:44:11.056
starting worker pid=42690 on localhost:11357 at 17:44:11.353
starting worker pid=42699 on localhost:11357 at 17:44:11.650
starting worker pid=42709 on localhost:11357 at 17:44:11.947
starting worker pid=42718 on localhost:11357 at 17:44:12.253
starting worker pid=42727 on localhost:11357 at 17:44:12.548
starting worker pid=42736 on localhost:11357 at 17:44:12.843
starting worker pid=42745 on localhost:11357 at 17:44:13.139
starting worker pid=42756 on localhost:11357 at 17:44:13.434
starting worker pid=42768 on localhost:11357 at 17:44:13.741
starting worker pid=42777 on localhost:11357 at 17:44:14.035
starting worker pid=42791 on localhost:11357 at 17:44:14.331
starting worker pid=42801 on localhost:11357 at 17:44:14.629
starting worker pid=42810 on localhost:11357 at 17:44:14.935
starting worker pid=42819 on localhost:11357 at 17:44:15.244
starting worker pid=42829 on localhost:11357 at 17:44:15.545
starting worker pid=42839 on localhost:11357 at 17:44:15.843
starting worker pid=42848 on localhost:11357 at 17:44:16.142
starting worker pid=42857 on localhost:11357 at 17:44:16.445
starting worker pid=42866 on localhost:11357 at 17:44:16.758
starting worker pid=42876 on localhost:11357 at 17:44:17.067
starting worker pid=42886 on localhost:11357 at 17:44:17.363
starting worker pid=42895 on localhost:11357 at 17:44:17.658
starting worker pid=42904 on localhost:11357 at 17:44:17.953
starting worker pid=42914 on localhost:11357 at 17:44:18.259
starting worker pid=42923 on localhost:11357 at 17:44:18.554
starting worker pid=42932 on localhost:11357 at 17:44:18.849
starting worker pid=42941 on localhost:11357 at 17:44:19.151
starting worker pid=42951 on localhost:11357 at 17:44:19.449
starting worker pid=42960 on localhost:11357 at 17:44:19.756
starting worker pid=42969 on localhost:11357 at 17:44:20.051
starting worker pid=42978 on localhost:11357 at 17:44:20.347
starting worker pid=42987 on localhost:11357 at 17:44:20.649
starting worker pid=42997 on localhost:11357 at 17:44:20.945
starting worker pid=43006 on localhost:11357 at 17:44:21.251
> registerDoParallel(cl)
> 
> # i <- 7
> ## Actual simulation ##
> res <- foreach(i = seq_len(nrow(sim_parameters)), .packages = c('episode', 'glmnet', 'magrittr', 'tsars')) %dopar% {
+   sim_param <- sim_parameters[i, ]
+   sigma <- sim_param$sigma
+   if (sim_param$a == "correct") {
+     A <- A_correct
+   } else if (sim_param$a == "extra") {
+     A <- A_extra
+   } else if (sim_param$a == "no_prior") {
+     dd <- rat$d
+     AB <- list(
+       A = kronecker(rbind(0, diag(dd)), c(0, rep(1, dd))),
+       B = kronecker(c(0, rep(1, dd)), rbind(0, diag(dd)))
+     )
+   } else {
+     stop("a not recognised")
+   }
+   if (sim_param$a == "no_prior") {
+     # Use approximate fit
+     odeobj <- mak(A = AB$A, B = AB$B, s = solver(step_max = 100000, h_init = 0.001))
+   } else {
+     # Use ratmak class for exact model class
+     odeobj <- ratmak(A = A, C = CC, s = solver(step_max = 100000, h_init = 0.001))
+   }
+   
+   # Log file
+   log_dir <- paste0("Log/log_", i)
+   cat(paste0("Started simulation setup ", i, "\n"), file = log_dir)
+   
+   # Get un-noised data and noise
+   # y_raw <- do.call(rbind, ys0[seq_len(E)])
+   ss <- 0
+   yse <- lapply(trajs0, function(x) {
+     ss <<- ss + 1
+     x[, -1] <- x[, -1] + sigma * eps[,,as.numeric(sim_param$eps)]
+     x
+   })
+   
+   ss <- 0
+   # yse <- yse[1:2]
+   # y <- yse[[1]]
+   # stab_remove <- replicate(50, replicate(50, no_neighbours(n = 30, l = 5)))
+   to.res <- lapply(yse, function(y) {
+     ss <<- ss + 1
+     
+     if (sim_param$a == "no_prior") {
+       # Use approximate fit
+       odeobj_ <- mak(A = AB$A[, -ss], B = AB$B[, -ss], s = solver(step_max = 100000, h_init = 0.001))
+     } else {
+       # Use ratmak class for exact model class
+       odeobj_ <- ratmak(A = A[, -ss], C = CC[, -ss], s = solver(step_max = 100000, h_init = 0.001))
+     }
+     
+     a <- episode::aim(odeobj_, opt(y = y[, -(ss+1)]), adapts = NULL)
+      
+     if (sim_param$a == "no_prior") {
+       ret <- list(params=a$params[[1]], odeobj=odeobj)
+       
+     } else {
+       # Run rodeo and collect loss value and network
+       ret <- sapply(seq_len(ncol(a$params$theta1)), function(i) {
+         # "exclude" not available for ratmak class, so simple work-around via box constraints and remove unused complexes #
+         theta1 <- matrix(a$params$theta1[, i], ncol = nrow(A))
+         theta2 <- matrix(a$params$theta2[, i], ncol = nrow(A))
+         reduced <- apply(theta1 != 0 | theta2 != 0, 2, any)
+         if (any(reduced)) {
+           lower1 <- c(0, -Inf)[as.numeric(theta1[, reduced] != 0) + 1]
+           upper1 <- c(0, Inf)[as.numeric(theta1[, reduced] != 0) + 1]
+           upper2 <- c(0, Inf)[as.numeric(theta2[, reduced] != 0) + 1]
+           rattrod <- ratmak(A = A[reduced, -ss, drop = FALSE], C = CC[, -ss], s = solver(step_max = 100000, h_init = 0.001),
+             r1 = reg("none", lower = lower1, upper = upper1, step_max = 20),
+             r2 = reg("none", upper = upper2, step_max = 20))
+           rod <- rodeo(rattrod, opt(y = y[, -(ss+1)]), x0 = pmax(a$x0s[, 1], 1e-5),
+             params = list(
+               theta1 = as.vector(theta1[, reduced]),
+               theta2 = as.vector(theta2[, reduced])))
+ 
+           # If error code, use integral matching instead
+           if (any(rod$codes > 2)) {
+             ntw <- field(odeobj_, x = x0[-ss], 
+               param = list(theta1 = a$params$theta1[, i],
+               theta2 = a$params$theta2[, i]), differentials = TRUE)$f_dx != 0
+           } else {
+             ntw <- field(rattrod, x = x0[-ss],
+               param = list(theta1 = rod$params$theta1[, 1],
+                 theta2 = rod$params$theta2[, 1]), differentials = TRUE)$f_dx != 0
+             attr(ntw, "loss") <- rod$losses
+           }
+         } else {
+           # empty model
+           ntw <- Matrix::Matrix(0, 21, 21)
+           colnames(ntw) <- rownames(ntw) <- names(x0[-ss])
+         } #
+         ntw
+       })
+     }
+     return(ret)
+   })
+   
+   
+   # Save
+   save(to.res, file = paste0("Results/res_", i, ".RData"))
+   cat(paste0("Saved result"), "\n",
+     file = log_dir, append = TRUE)
+   
+   to.res
+ }
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: Matrix
Loading required package: Matrix
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loading required package: foreach
Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

Loaded glmnet 2.0-18

> 
> 
> stopCluster(cl)
> 
> 
> 
> 
> 
> proc.time()
      user     system    elapsed 
    27.216     12.051 436870.961 
